/*

███████╗ █████╗ ██╗  ████████╗███╗   ███╗██╗███╗   ██╗███████╗██████╗
██╔════╝██╔══██╗██║  ╚══██╔══╝████╗ ████║██║████╗  ██║██╔════╝██╔══██╗
███████╗███████║██║     ██║   ██╔████╔██║██║██╔██╗ ██║█████╗  ██████╔╝
╚════██║██╔══██║██║     ██║   ██║╚██╔╝██║██║██║╚██╗██║██╔══╝  ██╔══██╗
███████║██║  ██║███████╗██║   ██║ ╚═╝ ██║██║██║ ╚████║███████╗██║  ██║
╚══════╝╚═╝  ╚═╝╚══════╝╚═╝   ╚═╝     ╚═╝╚═╝╚═╝  ╚═══╝╚══════╝╚═╝  ╚═╝

*/

/// @notice A utility for finding the salt for a CREATE2 address for a UniV4 Hook
/// @author devtooligan

/* Interface */
#define function mineSalt(address,uint256,bytes32) view returns (uint256,address)

/* Constants */
#define constant CREATE2_MARKER = 0xff
#define constant PREFIX_MASK = 0x00ff00000000000000000000000000000000000000
#define constant ADDRESS_MASK = 0x000000000000000000000000FFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF

#define macro MINE_SALT() = takes (0) returns (0) {
    0x60 0x04 0x00 calldatacopy
    0x20 mload              // [prefix]

    [CREATE2_MARKER]         // [0xff, prefix]
    0x0b mstore8             // [prefix]

    // Memory layout
    // Hashing  : 0xff(1) . deployerAddress(20) . salt(32) . initCodeHash(32)
    // Hash size: 1 + 20 + 32 + 32 == 85 == 0x55
    // Begins here at 0x0b with the CREATE2_MARKER, 0xff
    //                                        \/
    // 0x00: 00 00 00 00 00 00 00 00 00 00 00 ff |-- address(this) -------------- |
    // 0x20: |------------------------ salt ------------------------------------- |
    // 0x40: |----------------- keccak256(initCode) ----------------------------- |
    
    timestamp
    begin_loop:             // [salt, prefix]
        0x20 mstore         // [prefix]
        0x55 0x0b sha3      // [hash, prefix]
        dup1                // [hash, hash, prefix]
        [PREFIX_MASK] and   // [maskedHash, hash, prefix]
        dup3                // [prefix, maskedHash, hash, prefix]
        sub                 // [matchesPrefix, hash, prefix]
        begin_loop
        jumpi

        dup1                // [hash, hash, prefix]
        extcodesize         // [codeSize, hash, prefix]
        begin_loop
        jumpi

        [ADDRESS_MASK] and  // [newAddress, prefix]
        0x40 mstore         // [prefix]         
        pop
        0x40 0x20 return  
}

#define macro MAIN() = takes (0) returns (0) {
    0x00 calldataload 0xE0 shr
    dup1 __FUNC_SIG(mineSalt) eq mineSalt jumpi

    0x00 0x00 revert

    mineSalt:
        MINE_SALT()
}